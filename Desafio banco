class Banco:
    def __init__(self):
        self.agencias = [1111, 2222, 3333, ]
        self.clientes = []
        self.contas = []

    def inserir_cliente(self, cliente):
        self.clientes.append(cliente)

    def inserir_conta(self, conta):
        self.contas.append(conta)

    def autenticar(self, cliente):
        if cliente not in self.clientes:
            return False
        if cliente.conta not in self.contas:
            return False
        if cliente.conta.agencia not in self.agencias:
            return False
        return True

class Pessoa:
    # getter
    def __init__(self, nome, idade):
        self._nome = nome
        self._idade = idade

    @property
    def nome(self):
        return nome

    @property
    def idade(self):
        return idade


class Cliente(Pessoa):
    def __init__(self, nome, idade):
        super().__init__(nome, idade)
        self.conta = None

    def inserir_conta(self, conta):
        self.conta = conta



from abc import ABC, abstractmethod


class Conta(ABC):
    def __init__(self, agencia, conta, saldo):
        self.agencia = agencia
        self.conta = conta
        self.saldo = saldo

    def depositar(self, valor):
        self.saldo += valor
        self.detalhes()

    def detalhes(self):
        print(f'Agencia: {self.agencia}\n'
              f'Conta: {self.conta}\n'
              f'Saldo: {self.saldo}\n')

    @abstractmethod
    def sacar(self, valor): pass


class ContaPoupanca(Conta):
    def sacar(self, valor):
        if self.saldo < valor:
            print(f'Saldo insulficiente')
            return

        self.saldo -= valor
        self.detalhes()


class ContaCorrente(Conta):
    def __init__(self, agencia, conta, saldo, limite=100):
        super().__init__(agencia, conta, saldo)
        self.limite = limite

    def sacar(self, valor):
        if self.saldo + self.limite < valor:
            print('Saldo insulficiente')
            return

        self.saldo -= valor
        self.detalhes()



class ContaCorrente(Conta):
    def __init__(self, agencia, conta, saldo, limite=100):
        super().__init__(agencia, conta, saldo)
        self.limite = limite

    def sacar(self, valor):
        if self.saldo + self.limite < valor:
            printa('Saldo insulficiente')
            return

        self.saldo -= valor
        self.detalhes()

from banco import Banco
from cliente import Cliente
from conta import ContaCorrente, ContaPoupanca

banco = Banco()
cliente1 = Cliente('Luiz', 30)
cliente2 = Cliente('Jezndre', 28)
cliente3 = Cliente('Thais', 25)

conta1 = ContaPoupanca(1111, 485685, 0)
conta2 = ContaCorrente(2222, 123456, 0)
conta3 = ContaPoupanca(1204, 485685, 0)

cliente1.inserir_conta(conta1)
cliente2.inserir_conta(conta2)
cliente3.inserir_conta(conta3)

banco.inserir_cliente(cliente1)
banco.inserir_conta(conta1)

banco.inserir_cliente(cliente2)
banco.inserir_conta(conta2)

banco.inserir_cliente(cliente3)
banco.inserir_conta(conta3)

if banco.autenticar(cliente1):
    cliente1.conta.depositar(50)
    cliente1.conta.sacar(20)
    print('##############################')

else:
    print('Cliente não autenticado')

if banco.autenticar(cliente2):
    cliente2.conta.depositar(50)
    cliente2.conta.sacar(100)
    print('##############################')
else:
    print('Cliente não autenticado')

if banco.autenticar(cliente3):
    cliente3.conta.depositar(50)
    cliente3.conta.sacar(20)
    print('##############################')

else:
    print('Cliente não autenticado')
